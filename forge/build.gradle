plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        data {
            data()
            programArgs "--all", "--mod", "${mod_id}"
            programArgs "--output", project(":forge").file("src/generated/resources").absolutePath
            programArgs "--existing", project(":common").file("src/main/resources/").absolutePath
        }
    }

}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
    maven { url "https://maven.neoforged.net/releases/" }


}

dependencies {
    neoForge "net.neoforged:neoforge:${neoforge_version}"
    modImplementation "whocraft:tardis_refined_forge:${rootProject.tardis_refined_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

def resourceTargets = ["META-INF/mods.toml", "pack.mcmeta"]
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id: mod_id, mod_name: mod_name, mod_version: mod_version,
                         mod_authors: mod_authors, credits:credits, mod_description: mod_description,
                         display_url:display_url, logo_file:logo_file,
                         issue_tracker_url: issue_tracker_url,
                         license: license,
                         neoforge_version_range: neoforge_version_range, neoforge_minecraft_version_range: neoforge_minecraft_version_range,
                         neoforge_loader_version_range: neoforge_loader_version_range,
                         pack_format: pack_format,
                         neoforge_resource_pack_format: forge_resource_pack_format,
                         neoforge_data_pack_format: neoforge_data_pack_format,
                         // forge_immersive_portals_version_range: forge_immersive_portals_version_range
                         // ,display_test_type: display_test_type
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
